name: "Terraform Workflow"

on:
  workflow_call:
    inputs:
      terraform_version:
        required: false
        type: string
      runs-on:
        required: false
        type: string
      environment:
        required: true
        type: string
      action:
        required: true
        type: string
    secrets:
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_SECRET_ID:
        required: true
      PAT:
        required: true

jobs:
  terraform:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: 'Terraform ${{ inputs.action }}'
        shell: bash
        run: |
          set -x
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "$(gh api /users/${GITHUB_ACTOR} | jq .name -r)"

          cat << EOF > ~/.netrc
          machine github.com
          login ${GITHUB_ACTOR}
          password ${GITHUB_TOKEN}

          machine api.github.com
          login ${GITHUB_ACTOR}
          password ${GITHUB_TOKEN}
          EOF

          chmod 600 ~/.netrc

          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
          export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
          export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}

          export ENV=${{ inputs.environment }}
          #export ENV="staging"
          echo ${{ inputs.action }}

          export COMMIT_HASH=$(git rev-parse --short "${GITHUB_SHA}")
          echo $COMMIT_HASH
          
          bash build.sh ${{ inputs.action }}

          if [ $? -eq 0 ]; then
            bash build.sh testplan
          else
            echo -e "Error: Verify pipeline!"
          fi
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SECRET_ID: ${{ secrets.ARM_SECRET_ID }}
          GITHUB_TOKEN: ${{ secrets.PAT }}
          PAT: ${{ secrets.PAT }}
        #  #GITHUB_PAT: ${{ secrets.PAT }}
