name: "GitVerson Workflow"

on:
  workflow_call:
    inputs:
      versionSpec:
        required: false
        type: string
        default: '5.12.x'
      configFilePath:
        required: false
        type: string
        default: './GitVersion.yml'
      dotNetVersion:
        required: false
        type: string
        default: '3.1.x'
      runs-on:
        required: false
        type: string
        default: 'ubuntu-latest'
      environment:
        required: false
        type: string
        default: ''

jobs:
  release:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Input Version of GitVertion
        if: ${{ inputs.versionSpec }} != ''
        run: echo ${{ inputs.versionSpec }}

      - name: Input Gitversion Vonfiguration File Path.
        if: ${{ inputs.configFilePath }} != ''
        run: echo ${{ inputs.configFilePath }}

      - name: Input DotNet Install Version
        if: ${{ inputs.dotNetVersion }} != ''
        run: echo ${{ inputs.dotNetVersion }}

      - name: Input Github Agent
        if: ${{ inputs.username }} != ''
        run: echo ${{ inputs.runs-on }}

      - name: Input Environment
        if: ${{ inputs.environment }} != ''
        run: echo ${{ inputs.environment }}

      - uses: actions/checkout@v2.3.4 # Necessary to access local action

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Install DotNet
        uses: actions/setup-dotnet@v1
      
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1.1.1
        with:
          versionSpec: ${{ inputs.versionSpec }}
          includePrerelease: false
          ignoreFailedSources: false
          preferLatestVersion: true

      - name: Bump Version
        id: version
        uses: gittools/actions/gitversion/execute@v1.1.1

      #- name: "Create Release and Tag"
      #  run: |-
      #    set -x
      #    echo ${{ steps.version.outputs.SemVer }}
      #    
      #    #git config --global user.email "hosted.agent@dev.azure.com"
      #    #git config --global user.name "Azure Pipeline"
      #    
      #    ##git add $(System.DefaultWorkingDirectory)/releasenotes.md
      #    ##git commit -m "Update Release Notes."
      #    ##git tag $(SemVer)
      #    #git tag $(SemVer)
      #    ##git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin main
      #    #git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin $(SemVer)
      #    #git tag -a $(SemVer) -m 'Commit tag $(SemVer)' 
      #    #git push --tags

      - name: "✏️ Generate release changelog"
        uses: heinrichreimer/action-github-changelog-generator@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 

      - name: Commit CHANGELOG
        run: |-
          echo ${{ github.actor }}
          echo $GITHUB_WORKSPACE
          ls -l $GITHUB_WORKSPACE
          git config --global user.name 'Leandro Moreira'
          git config --global user.email '${{ github.actor }}@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add $GITHUB_WORKSPACE/CHANGELOG.md
          git commit -am "Update CHANGELOG.
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.version.outputs.SemVer }}
          release_name: Release ${{ steps.version.outputs.SemVer }}
          #body: |
          #  Changes in this Release
          #  - First Change
          #  - Second Change
          body_path: CHANGELOG.md
          draft: false
          prerelease: false


      #- name: Upload Release Asset
      #  id: upload-release-asset 
      #  uses: actions/upload-release-asset@v1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs #object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/##passing-data-to-future-steps 
      #    asset_path: NameOfYourArtifact.exe
      #    asset_name: NameOfYourArtifact.exe
      #    asset_content_type: application/octet-stream
      

